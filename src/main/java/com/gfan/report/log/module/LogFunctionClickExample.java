package com.gfan.report.log.module;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogFunctionClickExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	public LogFunctionClickExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	protected LogFunctionClickExample(LogFunctionClickExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table LOG_FUNCTION_CLICK
	 * @ibatorgenerated  Mon Dec 08 17:42:40 CST 2014
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("ID is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("ID is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("ID =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("ID <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("ID >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("ID >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("ID <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("ID <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List values) {
			addCriterion("ID in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List values) {
			addCriterion("ID not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("ID between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("ID not between", value1, value2, "id");
			return this;
		}

		public Criteria andUserIdIsNull() {
			addCriterion("USER_ID is null");
			return this;
		}

		public Criteria andUserIdIsNotNull() {
			addCriterion("USER_ID is not null");
			return this;
		}

		public Criteria andUserIdEqualTo(String value) {
			addCriterion("USER_ID =", value, "userId");
			return this;
		}

		public Criteria andUserIdNotEqualTo(String value) {
			addCriterion("USER_ID <>", value, "userId");
			return this;
		}

		public Criteria andUserIdGreaterThan(String value) {
			addCriterion("USER_ID >", value, "userId");
			return this;
		}

		public Criteria andUserIdGreaterThanOrEqualTo(String value) {
			addCriterion("USER_ID >=", value, "userId");
			return this;
		}

		public Criteria andUserIdLessThan(String value) {
			addCriterion("USER_ID <", value, "userId");
			return this;
		}

		public Criteria andUserIdLessThanOrEqualTo(String value) {
			addCriterion("USER_ID <=", value, "userId");
			return this;
		}

		public Criteria andUserIdLike(String value) {
			addCriterion("USER_ID like", value, "userId");
			return this;
		}

		public Criteria andUserIdNotLike(String value) {
			addCriterion("USER_ID not like", value, "userId");
			return this;
		}

		public Criteria andUserIdIn(List values) {
			addCriterion("USER_ID in", values, "userId");
			return this;
		}

		public Criteria andUserIdNotIn(List values) {
			addCriterion("USER_ID not in", values, "userId");
			return this;
		}

		public Criteria andUserIdBetween(String value1, String value2) {
			addCriterion("USER_ID between", value1, value2, "userId");
			return this;
		}

		public Criteria andUserIdNotBetween(String value1, String value2) {
			addCriterion("USER_ID not between", value1, value2, "userId");
			return this;
		}

		public Criteria andUserNameIsNull() {
			addCriterion("USER_NAME is null");
			return this;
		}

		public Criteria andUserNameIsNotNull() {
			addCriterion("USER_NAME is not null");
			return this;
		}

		public Criteria andUserNameEqualTo(String value) {
			addCriterion("USER_NAME =", value, "userName");
			return this;
		}

		public Criteria andUserNameNotEqualTo(String value) {
			addCriterion("USER_NAME <>", value, "userName");
			return this;
		}

		public Criteria andUserNameGreaterThan(String value) {
			addCriterion("USER_NAME >", value, "userName");
			return this;
		}

		public Criteria andUserNameGreaterThanOrEqualTo(String value) {
			addCriterion("USER_NAME >=", value, "userName");
			return this;
		}

		public Criteria andUserNameLessThan(String value) {
			addCriterion("USER_NAME <", value, "userName");
			return this;
		}

		public Criteria andUserNameLessThanOrEqualTo(String value) {
			addCriterion("USER_NAME <=", value, "userName");
			return this;
		}

		public Criteria andUserNameLike(String value) {
			addCriterion("USER_NAME like", value, "userName");
			return this;
		}

		public Criteria andUserNameNotLike(String value) {
			addCriterion("USER_NAME not like", value, "userName");
			return this;
		}

		public Criteria andUserNameIn(List values) {
			addCriterion("USER_NAME in", values, "userName");
			return this;
		}

		public Criteria andUserNameNotIn(List values) {
			addCriterion("USER_NAME not in", values, "userName");
			return this;
		}

		public Criteria andUserNameBetween(String value1, String value2) {
			addCriterion("USER_NAME between", value1, value2, "userName");
			return this;
		}

		public Criteria andUserNameNotBetween(String value1, String value2) {
			addCriterion("USER_NAME not between", value1, value2, "userName");
			return this;
		}

		public Criteria andUserIpIsNull() {
			addCriterion("USER_IP is null");
			return this;
		}

		public Criteria andUserIpIsNotNull() {
			addCriterion("USER_IP is not null");
			return this;
		}

		public Criteria andUserIpEqualTo(String value) {
			addCriterion("USER_IP =", value, "userIp");
			return this;
		}

		public Criteria andUserIpNotEqualTo(String value) {
			addCriterion("USER_IP <>", value, "userIp");
			return this;
		}

		public Criteria andUserIpGreaterThan(String value) {
			addCriterion("USER_IP >", value, "userIp");
			return this;
		}

		public Criteria andUserIpGreaterThanOrEqualTo(String value) {
			addCriterion("USER_IP >=", value, "userIp");
			return this;
		}

		public Criteria andUserIpLessThan(String value) {
			addCriterion("USER_IP <", value, "userIp");
			return this;
		}

		public Criteria andUserIpLessThanOrEqualTo(String value) {
			addCriterion("USER_IP <=", value, "userIp");
			return this;
		}

		public Criteria andUserIpLike(String value) {
			addCriterion("USER_IP like", value, "userIp");
			return this;
		}

		public Criteria andUserIpNotLike(String value) {
			addCriterion("USER_IP not like", value, "userIp");
			return this;
		}

		public Criteria andUserIpIn(List values) {
			addCriterion("USER_IP in", values, "userIp");
			return this;
		}

		public Criteria andUserIpNotIn(List values) {
			addCriterion("USER_IP not in", values, "userIp");
			return this;
		}

		public Criteria andUserIpBetween(String value1, String value2) {
			addCriterion("USER_IP between", value1, value2, "userIp");
			return this;
		}

		public Criteria andUserIpNotBetween(String value1, String value2) {
			addCriterion("USER_IP not between", value1, value2, "userIp");
			return this;
		}

		public Criteria andFunctionIdIsNull() {
			addCriterion("FUNCTION_ID is null");
			return this;
		}

		public Criteria andFunctionIdIsNotNull() {
			addCriterion("FUNCTION_ID is not null");
			return this;
		}

		public Criteria andFunctionIdEqualTo(Integer value) {
			addCriterion("FUNCTION_ID =", value, "functionId");
			return this;
		}

		public Criteria andFunctionIdNotEqualTo(Integer value) {
			addCriterion("FUNCTION_ID <>", value, "functionId");
			return this;
		}

		public Criteria andFunctionIdGreaterThan(Integer value) {
			addCriterion("FUNCTION_ID >", value, "functionId");
			return this;
		}

		public Criteria andFunctionIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("FUNCTION_ID >=", value, "functionId");
			return this;
		}

		public Criteria andFunctionIdLessThan(Integer value) {
			addCriterion("FUNCTION_ID <", value, "functionId");
			return this;
		}

		public Criteria andFunctionIdLessThanOrEqualTo(Integer value) {
			addCriterion("FUNCTION_ID <=", value, "functionId");
			return this;
		}

		public Criteria andFunctionIdIn(List values) {
			addCriterion("FUNCTION_ID in", values, "functionId");
			return this;
		}

		public Criteria andFunctionIdNotIn(List values) {
			addCriterion("FUNCTION_ID not in", values, "functionId");
			return this;
		}

		public Criteria andFunctionIdBetween(Integer value1, Integer value2) {
			addCriterion("FUNCTION_ID between", value1, value2, "functionId");
			return this;
		}

		public Criteria andFunctionIdNotBetween(Integer value1, Integer value2) {
			addCriterion("FUNCTION_ID not between", value1, value2,
					"functionId");
			return this;
		}

		public Criteria andFunctionNameIsNull() {
			addCriterion("FUNCTION_NAME is null");
			return this;
		}

		public Criteria andFunctionNameIsNotNull() {
			addCriterion("FUNCTION_NAME is not null");
			return this;
		}

		public Criteria andFunctionNameEqualTo(String value) {
			addCriterion("FUNCTION_NAME =", value, "functionName");
			return this;
		}

		public Criteria andFunctionNameNotEqualTo(String value) {
			addCriterion("FUNCTION_NAME <>", value, "functionName");
			return this;
		}

		public Criteria andFunctionNameGreaterThan(String value) {
			addCriterion("FUNCTION_NAME >", value, "functionName");
			return this;
		}

		public Criteria andFunctionNameGreaterThanOrEqualTo(String value) {
			addCriterion("FUNCTION_NAME >=", value, "functionName");
			return this;
		}

		public Criteria andFunctionNameLessThan(String value) {
			addCriterion("FUNCTION_NAME <", value, "functionName");
			return this;
		}

		public Criteria andFunctionNameLessThanOrEqualTo(String value) {
			addCriterion("FUNCTION_NAME <=", value, "functionName");
			return this;
		}

		public Criteria andFunctionNameLike(String value) {
			addCriterion("FUNCTION_NAME like", value, "functionName");
			return this;
		}

		public Criteria andFunctionNameNotLike(String value) {
			addCriterion("FUNCTION_NAME not like", value, "functionName");
			return this;
		}

		public Criteria andFunctionNameIn(List values) {
			addCriterion("FUNCTION_NAME in", values, "functionName");
			return this;
		}

		public Criteria andFunctionNameNotIn(List values) {
			addCriterion("FUNCTION_NAME not in", values, "functionName");
			return this;
		}

		public Criteria andFunctionNameBetween(String value1, String value2) {
			addCriterion("FUNCTION_NAME between", value1, value2,
					"functionName");
			return this;
		}

		public Criteria andFunctionNameNotBetween(String value1, String value2) {
			addCriterion("FUNCTION_NAME not between", value1, value2,
					"functionName");
			return this;
		}

		public Criteria andLogTimeIsNull() {
			addCriterion("LOG_TIME is null");
			return this;
		}

		public Criteria andLogTimeIsNotNull() {
			addCriterion("LOG_TIME is not null");
			return this;
		}

		public Criteria andLogTimeEqualTo(Date value) {
			addCriterion("LOG_TIME =", value, "logTime");
			return this;
		}

		public Criteria andLogTimeNotEqualTo(Date value) {
			addCriterion("LOG_TIME <>", value, "logTime");
			return this;
		}

		public Criteria andLogTimeGreaterThan(Date value) {
			addCriterion("LOG_TIME >", value, "logTime");
			return this;
		}

		public Criteria andLogTimeGreaterThanOrEqualTo(Date value) {
			addCriterion("LOG_TIME >=", value, "logTime");
			return this;
		}

		public Criteria andLogTimeLessThan(Date value) {
			addCriterion("LOG_TIME <", value, "logTime");
			return this;
		}

		public Criteria andLogTimeLessThanOrEqualTo(Date value) {
			addCriterion("LOG_TIME <=", value, "logTime");
			return this;
		}

		public Criteria andLogTimeIn(List values) {
			addCriterion("LOG_TIME in", values, "logTime");
			return this;
		}

		public Criteria andLogTimeNotIn(List values) {
			addCriterion("LOG_TIME not in", values, "logTime");
			return this;
		}

		public Criteria andLogTimeBetween(Date value1, Date value2) {
			addCriterion("LOG_TIME between", value1, value2, "logTime");
			return this;
		}

		public Criteria andLogTimeNotBetween(Date value1, Date value2) {
			addCriterion("LOG_TIME not between", value1, value2, "logTime");
			return this;
		}

		public Criteria andInsertTimeIsNull() {
			addCriterion("INSERT_TIME is null");
			return this;
		}

		public Criteria andInsertTimeIsNotNull() {
			addCriterion("INSERT_TIME is not null");
			return this;
		}

		public Criteria andInsertTimeEqualTo(Date value) {
			addCriterion("INSERT_TIME =", value, "insertTime");
			return this;
		}

		public Criteria andInsertTimeNotEqualTo(Date value) {
			addCriterion("INSERT_TIME <>", value, "insertTime");
			return this;
		}

		public Criteria andInsertTimeGreaterThan(Date value) {
			addCriterion("INSERT_TIME >", value, "insertTime");
			return this;
		}

		public Criteria andInsertTimeGreaterThanOrEqualTo(Date value) {
			addCriterion("INSERT_TIME >=", value, "insertTime");
			return this;
		}

		public Criteria andInsertTimeLessThan(Date value) {
			addCriterion("INSERT_TIME <", value, "insertTime");
			return this;
		}

		public Criteria andInsertTimeLessThanOrEqualTo(Date value) {
			addCriterion("INSERT_TIME <=", value, "insertTime");
			return this;
		}

		public Criteria andInsertTimeIn(List values) {
			addCriterion("INSERT_TIME in", values, "insertTime");
			return this;
		}

		public Criteria andInsertTimeNotIn(List values) {
			addCriterion("INSERT_TIME not in", values, "insertTime");
			return this;
		}

		public Criteria andInsertTimeBetween(Date value1, Date value2) {
			addCriterion("INSERT_TIME between", value1, value2, "insertTime");
			return this;
		}

		public Criteria andInsertTimeNotBetween(Date value1, Date value2) {
			addCriterion("INSERT_TIME not between", value1, value2,
					"insertTime");
			return this;
		}
	}
}