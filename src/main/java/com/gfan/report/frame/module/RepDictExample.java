package com.gfan.report.frame.module;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RepDictExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    public RepDictExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    protected RepDictExample(RepDictExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table REP_DICT
     *
     * @ibatorgenerated Fri Sep 26 16:42:48 CST 2014
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("ID =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("ID <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("ID >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ID >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("ID <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("ID <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("ID in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("ID not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("ID between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ID not between", value1, value2, "id");
            return this;
        }

        public Criteria andDictTypeIsNull() {
            addCriterion("DICT_TYPE is null");
            return this;
        }

        public Criteria andDictTypeIsNotNull() {
            addCriterion("DICT_TYPE is not null");
            return this;
        }

        public Criteria andDictTypeEqualTo(String value) {
            addCriterion("DICT_TYPE =", value, "dictType");
            return this;
        }

        public Criteria andDictTypeNotEqualTo(String value) {
            addCriterion("DICT_TYPE <>", value, "dictType");
            return this;
        }

        public Criteria andDictTypeGreaterThan(String value) {
            addCriterion("DICT_TYPE >", value, "dictType");
            return this;
        }

        public Criteria andDictTypeGreaterThanOrEqualTo(String value) {
            addCriterion("DICT_TYPE >=", value, "dictType");
            return this;
        }

        public Criteria andDictTypeLessThan(String value) {
            addCriterion("DICT_TYPE <", value, "dictType");
            return this;
        }

        public Criteria andDictTypeLessThanOrEqualTo(String value) {
            addCriterion("DICT_TYPE <=", value, "dictType");
            return this;
        }

        public Criteria andDictTypeLike(String value) {
            addCriterion("DICT_TYPE like", value, "dictType");
            return this;
        }

        public Criteria andDictTypeNotLike(String value) {
            addCriterion("DICT_TYPE not like", value, "dictType");
            return this;
        }

        public Criteria andDictTypeIn(List values) {
            addCriterion("DICT_TYPE in", values, "dictType");
            return this;
        }

        public Criteria andDictTypeNotIn(List values) {
            addCriterion("DICT_TYPE not in", values, "dictType");
            return this;
        }

        public Criteria andDictTypeBetween(String value1, String value2) {
            addCriterion("DICT_TYPE between", value1, value2, "dictType");
            return this;
        }

        public Criteria andDictTypeNotBetween(String value1, String value2) {
            addCriterion("DICT_TYPE not between", value1, value2, "dictType");
            return this;
        }

        public Criteria andDictKeyIsNull() {
            addCriterion("DICT_KEY is null");
            return this;
        }

        public Criteria andDictKeyIsNotNull() {
            addCriterion("DICT_KEY is not null");
            return this;
        }

        public Criteria andDictKeyEqualTo(String value) {
            addCriterion("DICT_KEY =", value, "dictKey");
            return this;
        }

        public Criteria andDictKeyNotEqualTo(String value) {
            addCriterion("DICT_KEY <>", value, "dictKey");
            return this;
        }

        public Criteria andDictKeyGreaterThan(String value) {
            addCriterion("DICT_KEY >", value, "dictKey");
            return this;
        }

        public Criteria andDictKeyGreaterThanOrEqualTo(String value) {
            addCriterion("DICT_KEY >=", value, "dictKey");
            return this;
        }

        public Criteria andDictKeyLessThan(String value) {
            addCriterion("DICT_KEY <", value, "dictKey");
            return this;
        }

        public Criteria andDictKeyLessThanOrEqualTo(String value) {
            addCriterion("DICT_KEY <=", value, "dictKey");
            return this;
        }

        public Criteria andDictKeyLike(String value) {
            addCriterion("DICT_KEY like", value, "dictKey");
            return this;
        }

        public Criteria andDictKeyNotLike(String value) {
            addCriterion("DICT_KEY not like", value, "dictKey");
            return this;
        }

        public Criteria andDictKeyIn(List values) {
            addCriterion("DICT_KEY in", values, "dictKey");
            return this;
        }

        public Criteria andDictKeyNotIn(List values) {
            addCriterion("DICT_KEY not in", values, "dictKey");
            return this;
        }

        public Criteria andDictKeyBetween(String value1, String value2) {
            addCriterion("DICT_KEY between", value1, value2, "dictKey");
            return this;
        }

        public Criteria andDictKeyNotBetween(String value1, String value2) {
            addCriterion("DICT_KEY not between", value1, value2, "dictKey");
            return this;
        }

        public Criteria andDictOrderIsNull() {
            addCriterion("DICT_ORDER is null");
            return this;
        }

        public Criteria andDictOrderIsNotNull() {
            addCriterion("DICT_ORDER is not null");
            return this;
        }

        public Criteria andDictOrderEqualTo(Integer value) {
            addCriterion("DICT_ORDER =", value, "dictOrder");
            return this;
        }

        public Criteria andDictOrderNotEqualTo(Integer value) {
            addCriterion("DICT_ORDER <>", value, "dictOrder");
            return this;
        }

        public Criteria andDictOrderGreaterThan(Integer value) {
            addCriterion("DICT_ORDER >", value, "dictOrder");
            return this;
        }

        public Criteria andDictOrderGreaterThanOrEqualTo(Integer value) {
            addCriterion("DICT_ORDER >=", value, "dictOrder");
            return this;
        }

        public Criteria andDictOrderLessThan(Integer value) {
            addCriterion("DICT_ORDER <", value, "dictOrder");
            return this;
        }

        public Criteria andDictOrderLessThanOrEqualTo(Integer value) {
            addCriterion("DICT_ORDER <=", value, "dictOrder");
            return this;
        }

        public Criteria andDictOrderIn(List values) {
            addCriterion("DICT_ORDER in", values, "dictOrder");
            return this;
        }

        public Criteria andDictOrderNotIn(List values) {
            addCriterion("DICT_ORDER not in", values, "dictOrder");
            return this;
        }

        public Criteria andDictOrderBetween(Integer value1, Integer value2) {
            addCriterion("DICT_ORDER between", value1, value2, "dictOrder");
            return this;
        }

        public Criteria andDictOrderNotBetween(Integer value1, Integer value2) {
            addCriterion("DICT_ORDER not between", value1, value2, "dictOrder");
            return this;
        }

        public Criteria andDictValueIsNull() {
            addCriterion("DICT_VALUE is null");
            return this;
        }

        public Criteria andDictValueIsNotNull() {
            addCriterion("DICT_VALUE is not null");
            return this;
        }

        public Criteria andDictValueEqualTo(String value) {
            addCriterion("DICT_VALUE =", value, "dictValue");
            return this;
        }

        public Criteria andDictValueNotEqualTo(String value) {
            addCriterion("DICT_VALUE <>", value, "dictValue");
            return this;
        }

        public Criteria andDictValueGreaterThan(String value) {
            addCriterion("DICT_VALUE >", value, "dictValue");
            return this;
        }

        public Criteria andDictValueGreaterThanOrEqualTo(String value) {
            addCriterion("DICT_VALUE >=", value, "dictValue");
            return this;
        }

        public Criteria andDictValueLessThan(String value) {
            addCriterion("DICT_VALUE <", value, "dictValue");
            return this;
        }

        public Criteria andDictValueLessThanOrEqualTo(String value) {
            addCriterion("DICT_VALUE <=", value, "dictValue");
            return this;
        }

        public Criteria andDictValueLike(String value) {
            addCriterion("DICT_VALUE like", value, "dictValue");
            return this;
        }

        public Criteria andDictValueNotLike(String value) {
            addCriterion("DICT_VALUE not like", value, "dictValue");
            return this;
        }

        public Criteria andDictValueIn(List values) {
            addCriterion("DICT_VALUE in", values, "dictValue");
            return this;
        }

        public Criteria andDictValueNotIn(List values) {
            addCriterion("DICT_VALUE not in", values, "dictValue");
            return this;
        }

        public Criteria andDictValueBetween(String value1, String value2) {
            addCriterion("DICT_VALUE between", value1, value2, "dictValue");
            return this;
        }

        public Criteria andDictValueNotBetween(String value1, String value2) {
            addCriterion("DICT_VALUE not between", value1, value2, "dictValue");
            return this;
        }

        public Criteria andInsertTimeIsNull() {
            addCriterion("INSERT_TIME is null");
            return this;
        }

        public Criteria andInsertTimeIsNotNull() {
            addCriterion("INSERT_TIME is not null");
            return this;
        }

        public Criteria andInsertTimeEqualTo(String value) {
            addCriterion("INSERT_TIME =", value, "insertTime");
            return this;
        }

        public Criteria andInsertTimeNotEqualTo(String value) {
            addCriterion("INSERT_TIME <>", value, "insertTime");
            return this;
        }

        public Criteria andInsertTimeGreaterThan(String value) {
            addCriterion("INSERT_TIME >", value, "insertTime");
            return this;
        }

        public Criteria andInsertTimeGreaterThanOrEqualTo(String value) {
            addCriterion("INSERT_TIME >=", value, "insertTime");
            return this;
        }

        public Criteria andInsertTimeLessThan(String value) {
            addCriterion("INSERT_TIME <", value, "insertTime");
            return this;
        }

        public Criteria andInsertTimeLessThanOrEqualTo(String value) {
            addCriterion("INSERT_TIME <=", value, "insertTime");
            return this;
        }

        public Criteria andInsertTimeLike(String value) {
            addCriterion("INSERT_TIME like", value, "insertTime");
            return this;
        }

        public Criteria andInsertTimeNotLike(String value) {
            addCriterion("INSERT_TIME not like", value, "insertTime");
            return this;
        }

        public Criteria andInsertTimeIn(List values) {
            addCriterion("INSERT_TIME in", values, "insertTime");
            return this;
        }

        public Criteria andInsertTimeNotIn(List values) {
            addCriterion("INSERT_TIME not in", values, "insertTime");
            return this;
        }

        public Criteria andInsertTimeBetween(String value1, String value2) {
            addCriterion("INSERT_TIME between", value1, value2, "insertTime");
            return this;
        }

        public Criteria andInsertTimeNotBetween(String value1, String value2) {
            addCriterion("INSERT_TIME not between", value1, value2, "insertTime");
            return this;
        }
    }
}